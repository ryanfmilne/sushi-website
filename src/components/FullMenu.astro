---
// FullMenu.astro - A component to display the full restaurant menu with categories.

// Import necessary components or styles
import "../styles/menu.css";

export interface Props {
  // Props for customization if needed
  showCategories?: boolean;
}

const { showCategories = true } = Astro.props;

// Import all menu items from content collection
let allMenuItems = [];
let categories = [];

try {
  // Import the getCollection function from Astro content
  const { getCollection } = await import("astro:content");

  // Fetch published menu items
  allMenuItems = await getCollection("menu", ({ data }) => {
    return data.published === true;
  });

  // Get unique categories and sort them
  categories = [...new Set(allMenuItems.map((item) => item.data.category))];

  // Sort categories in the correct order
  const categoryOrder = [
    "Entradas",
    "Charolas",
    "Arroces",
    "Naturales",
    "Empanizados",
    "Horneados",
    "Bebidas",
    "Extras",
  ];
  categories.sort((a, b) => {
    const indexA = categoryOrder.indexOf(a);
    const indexB = categoryOrder.indexOf(b);
    if (indexA === -1) return 1;
    if (indexB === -1) return -1;
    return indexA - indexB;
  });
} catch (error) {
  console.error("Error loading menu items:", error);

  // If there's an error, provide the correct categories
  categories = [
    "Entradas",
    "Charolas",
    "Arroces",
    "Naturales",
    "Empanizados",
    "Horneados",
    "Bebidas",
    "Extras",
  ];
  allMenuItems = [];
}

// Group menu items by category
const menuByCategory = categories.reduce((acc, category) => {
  acc[category] = allMenuItems.filter(
    (item) => item.data.category === category
  );
  return acc;
}, {});

// Fallback content if no menu items are found
const noItemsMessage =
  "No menu items found. The restaurant owner will add menu items soon using the content management system.";

// Function to create category ID
const getCategoryId = (category) => {
  return category.toLowerCase().replace(/\s+/g, "-");
};
---

<div class="bg-stone-100 py-8">
  <div class="container mx-auto px-4">
    <!-- Mobile Category Navigation (visible on mobile only) -->
    <div
      class="block md:hidden mb-8 bg-white rounded-lg shadow overflow-x-auto mobile-category-nav">
      <div class="flex whitespace-nowrap">
        {
          categories.map((category) => (
            <a
              href={`#${getCategoryId(category)}`}
              class="py-3 px-4 font-medium text-stone-700 hover:text-orange-600 border-b-2 border-transparent hover:border-orange-600 transition-colors">
              {category}
            </a>
          ))
        }
      </div>
    </div>

    <div class="flex flex-col md:flex-row gap-8">
      <!-- Sidebar Category Menu (hidden on mobile) -->
      {
        showCategories && (
          <div class="hidden md:block w-64 flex-shrink-0">
            <div class="bg-white rounded-lg shadow sticky top-24 sticky-sidebar">
              <div class="p-4 border-b border-stone-200">
                <h3 class="font-heading font-bold text-lg">Categories</h3>
              </div>
              <nav class="p-2">
                <ul>
                  {categories.map((category) => (
                    <li>
                      <a
                        href={`#${getCategoryId(category)}`}
                        class="category-link block py-2 px-3 rounded hover:bg-orange-50 text-stone-700 hover:text-orange-600 transition-colors">
                        {category}
                      </a>
                    </li>
                  ))}
                </ul>
              </nav>
            </div>
          </div>
        )
      }

      <!-- Menu Content Area -->
      <div class="w-full">
        {
          allMenuItems.length === 0 ? (
            <div class="bg-white p-8 rounded-lg shadow-md text-center">
              <p class="text-lg text-stone-600">{noItemsMessage}</p>
            </div>
          ) : (
            <div class="space-y-12">
              {categories.map((category) =>
                menuByCategory[category]?.length > 0 ? (
                  <div id={getCategoryId(category)} class="scroll-mt-36">
                    <div class="bg-white rounded-lg shadow-md p-6">
                      <h2 class="text-2xl font-heading font-semibold mb-6 pb-2 border-b border-stone-200 category-heading">
                        {category}
                      </h2>
                      <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                        {menuByCategory[category].map((item) => (
                          <div class="menu-item flex flex-col md:flex-row gap-4 p-4 border border-stone-100 rounded-lg hover:shadow-md transition-shadow">
                            {item.data.image && (
                              <div class="w-full md:w-32 h-32 flex-shrink-0">
                                <img
                                  src={item.data.image}
                                  alt={item.data.title}
                                  class="w-full h-full object-cover rounded-md"
                                  loading="lazy"
                                />
                              </div>
                            )}
                            <div class="flex-grow">
                              <div class="flex justify-between items-start mb-2">
                                <h3 class="text-lg font-heading font-semibold">
                                  {item.data.title}
                                </h3>
                                <span class="text-orange-600 font-medium ml-4">
                                  ${item.data.price.toFixed(2)}
                                </span>
                              </div>
                              <p class="text-stone-600 text-sm mb-3">
                                {item.data.description}
                              </p>
                              <div class="flex flex-wrap items-center gap-2 mt-auto">
                                {item.data.vegetarian && (
                                  <span class="bg-green-100 text-green-800 text-xs font-medium px-2 py-0.5 rounded">
                                    Vegetarian
                                  </span>
                                )}
                                {item.data.vegan && (
                                  <span class="bg-green-100 text-green-800 text-xs font-medium px-2 py-0.5 rounded">
                                    Vegan
                                  </span>
                                )}
                                {item.data.glutenFree && (
                                  <span class="bg-blue-100 text-blue-800 text-xs font-medium px-2 py-0.5 rounded">
                                    Gluten-Free
                                  </span>
                                )}
                                {item.data.spicyLevel > 0 && (
                                  <div class="flex items-center">
                                    <span class="text-xs text-stone-600 mr-1">
                                      Spicy: {item.data.spicyLevel}
                                    </span>
                                  </div>
                                )}
                              </div>
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                ) : null
              )}
            </div>
          )
        }
      </div>
    </div>
  </div>
</div>

<style>
  /* Add styles for mobile category navigation sticky behavior */
  .mobile-category-nav {
    transition: all 0.3s ease-in-out;
    overflow-x: auto;
    -webkit-overflow-scrolling: touch; /* For smooth scrolling on iOS */
    scrollbar-width: none; /* Hide scrollbar in Firefox */
    -ms-overflow-style: none; /* Hide scrollbar in IE/Edge */
  }

  /* Hide scrollbar in Chrome/Safari */
  .mobile-category-nav::-webkit-scrollbar {
    display: none;
  }

  .mobile-category-nav.sticky {
    position: fixed;
    top: 0;
    left: 0;
    width: 100% !important;
    z-index: 100;
    border-radius: 0;
    margin: 0; /* Remove any margin */
    padding-top: 0; /* Ensure no top padding */
  }

  /* Ensure smooth transitions for the sticky sidebar */
  .sticky-sidebar {
    transition: top 0.3s ease-in-out;
  }

  /* Style for active category in both mobile and desktop views */
  .mobile-category-nav a.active {
    font-weight: bold;
    color: rgb(234 88 12); /* text-orange-600 */
    border-bottom-color: rgb(234 88 12); /* border-orange-600 */
  }

  .category-link.active {
    font-weight: bold;
    color: rgb(234 88 12); /* text-orange-600 */
    background-color: rgb(255 247 237); /* bg-orange-50 */
  }

  /* Define animation for scroll hint */
  @keyframes scrollHint {
    0% {
      transform: translateX(0);
    }
    25% {
      transform: translateX(40px);
    }
    50% {
      transform: translateX(0);
    }
    100% {
      transform: translateX(0);
    }
  }
</style>

<script>
  // Smooth scrolling for category links
  document.addEventListener("DOMContentLoaded", () => {
    const categoryLinks = document.querySelectorAll(
      ".category-link, .mobile-category-nav a"
    );

    // Function to show scroll hint animation for mobile menu
    const showScrollHint = () => {
      const mobileMenu = document.querySelector(".mobile-category-nav");
      if (mobileMenu && window.innerWidth < 768) {
        // Only on mobile screens
        // Check if the menu is actually scrollable
        if (mobileMenu.scrollWidth > mobileMenu.clientWidth) {
          // Save current scroll position
          const currentScrollPos = mobileMenu.scrollLeft;

          // Animate scroll to indicate more content
          const scrollDistance = Math.min(
            30,
            mobileMenu.scrollWidth - mobileMenu.clientWidth
          );

          // Timing function for smooth animation with easing
          const animateScroll = (
            timestamp,
            startTime,
            startPos,
            distance,
            duration
          ) => {
            if (!startTime) startTime = timestamp;
            const elapsed = timestamp - startTime;

            if (elapsed < duration) {
              // Easing function: easeOutQuad - acceleration until halfway, then deceleration
              const progress = elapsed / duration;
              // Apply cubic-bezier easing curve - similar to CSS ease-out
              const easeOutCubic = 1 - Math.pow(1 - progress, 3);

              mobileMenu.scrollLeft = startPos + distance * easeOutCubic;
              requestAnimationFrame((timestamp) =>
                animateScroll(
                  timestamp,
                  startTime,
                  startPos,
                  distance,
                  duration
                )
              );
            } else {
              // Smoothly return to original position
              const returnToStart = (
                timestamp,
                startTime,
                startPos,
                endPos,
                duration
              ) => {
                if (!startTime) startTime = timestamp;
                const elapsed = timestamp - startTime;

                if (elapsed < duration) {
                  // Apply ease-in-out for return animation
                  const progress = elapsed / duration;
                  const easeInOutQuad =
                    progress < 0.5
                      ? 2 * progress * progress
                      : 1 - Math.pow(-2 * progress + 2, 2) / 2;

                  mobileMenu.scrollLeft =
                    startPos + (endPos - startPos) * easeInOutQuad;
                  requestAnimationFrame((timestamp) =>
                    returnToStart(
                      timestamp,
                      startTime,
                      startPos,
                      endPos,
                      duration
                    )
                  );
                } else {
                  mobileMenu.scrollLeft = endPos;
                }
              };

              // Start the return animation after a small pause
              setTimeout(() => {
                requestAnimationFrame((timestamp) =>
                  returnToStart(
                    timestamp,
                    null,
                    mobileMenu.scrollLeft,
                    currentScrollPos,
                    300
                  )
                );
              }, 150);
            }
          };

          // Start animation
          requestAnimationFrame((timestamp) =>
            animateScroll(
              timestamp,
              null,
              currentScrollPos,
              scrollDistance,
              450
            )
          );
        }
      }
    };

    // Delay the scroll hint animation
    setTimeout(showScrollHint, 1200);

    // New code for improved sticky behavior
    const header = document.querySelector("header");
    const mobileNav = document.querySelector(".mobile-category-nav");
    const stickyDesktopSidebar = document.querySelector(".sticky-sidebar");

    if (header && mobileNav && stickyDesktopSidebar) {
      const headerHeight = header.offsetHeight;

      // Set desktop sidebar to stick right below header
      stickyDesktopSidebar.style.top = `${headerHeight}px`;

      // Create a sentinel element to observe for mobile nav
      const mobileSentinel = document.createElement("div");
      mobileSentinel.style.height = "1px";
      mobileSentinel.style.width = "100%";
      mobileSentinel.style.visibility = "hidden";
      mobileSentinel.style.position = "absolute";
      mobileSentinel.style.top = "0";
      mobileSentinel.style.left = "0";
      mobileSentinel.style.pointerEvents = "none";

      // Add sentinel before mobile nav
      mobileNav.parentNode.insertBefore(mobileSentinel, mobileNav);

      // Intersection Observer for mobile nav
      const mobileObserverOptions = {
        threshold: 0,
        rootMargin: `-${headerHeight}px 0px 0px 0px`,
      };

      const mobileObserver = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          if (!entry.isIntersecting) {
            mobileNav.classList.add("sticky");
            mobileNav.style.top = `${headerHeight}px`;

            // Ensure there's no space between header and mobile nav
            mobileNav.style.marginTop = "0";
            mobileNav.style.marginBottom = "0";
            mobileNav.style.paddingTop = "0";
          } else {
            mobileNav.classList.remove("sticky");
            mobileNav.style.top = "";

            // Reset any inline margins/paddings when not sticky
            mobileNav.style.marginTop = "";
            mobileNav.style.marginBottom = "";
            mobileNav.style.paddingTop = "";
          }
        });
      }, mobileObserverOptions);

      mobileObserver.observe(mobileSentinel);

      // Update on window resize
      window.addEventListener("resize", () => {
        const newHeaderHeight = header.offsetHeight;

        // Update desktop sidebar
        stickyDesktopSidebar.style.top = `${newHeaderHeight}px`;

        // Update mobile nav if sticky
        if (mobileNav.classList.contains("sticky")) {
          mobileNav.style.top = `${newHeaderHeight}px`;
        }

        // Update observer
        mobileObserver.disconnect();
        const newOptions = {
          threshold: 0,
          rootMargin: `-${newHeaderHeight}px 0px 0px 0px`,
        };

        const newObserver = new IntersectionObserver((entries) => {
          entries.forEach((entry) => {
            if (!entry.isIntersecting) {
              mobileNav.classList.add("sticky");
              mobileNav.style.top = `${newHeaderHeight}px`;

              // Ensure there's no space between header and mobile nav
              mobileNav.style.marginTop = "0";
              mobileNav.style.marginBottom = "0";
              mobileNav.style.paddingTop = "0";
            } else {
              mobileNav.classList.remove("sticky");
              mobileNav.style.top = "";

              // Reset any inline margins/paddings when not sticky
              mobileNav.style.marginTop = "";
              mobileNav.style.marginBottom = "";
              mobileNav.style.paddingTop = "";
            }
          });
        }, newOptions);

        newObserver.observe(mobileSentinel);

        // Recalculate active category on resize
        updateActiveCategory();
      });

      // Make sure categories update when scrolling with sticky header
      mobileNav.addEventListener("click", () => {
        // Delay the update to allow for scrolling to complete
        setTimeout(updateActiveCategory, 100);
        // Follow-up check for when animations complete
        setTimeout(updateActiveCategory, 500);
      });
    }

    // Function to update active category link and scroll it into view
    const updateActiveCategory = () => {
      // Get all category sections
      const sections = document.querySelectorAll(
        '[id^="entradas"], [id^="charolas"], [id^="arroces"], [id^="naturales"], [id^="empanizados"], [id^="horneados"], [id^="bebidas"], [id^="extras"]'
      );

      // Find which section is currently most visible
      let currentSection = "";
      let maxVisibility = 0;

      sections.forEach((section) => {
        const rect = section.getBoundingClientRect();
        const sectionHeight = rect.height;
        const visibleHeight =
          Math.min(rect.bottom, window.innerHeight) - Math.max(rect.top, 0);
        const percentVisible = visibleHeight / sectionHeight;

        if (percentVisible > maxVisibility && percentVisible > 0) {
          maxVisibility = percentVisible;
          currentSection = section.id;
        }
      });

      // Previous active element
      const previousActive = document.querySelector(
        ".mobile-category-nav a.active"
      );
      let activeChanged = false;

      // Update active class
      categoryLinks.forEach((link) => {
        const href = link.getAttribute("href").substring(1);
        if (href === currentSection) {
          if (!link.classList.contains("active")) {
            link.classList.add("active");
            activeChanged = true;
          }
        } else {
          link.classList.remove("active");
        }
      });

      // Scroll active category into view in mobile navigation
      const mobileNav = document.querySelector(".mobile-category-nav");
      const newActiveLink = document.querySelector(
        ".mobile-category-nav a.active"
      );

      if (mobileNav && newActiveLink && window.innerWidth < 768) {
        // Only scroll if active item changed or was not previously in optimal view
        if (activeChanged || previousActive !== newActiveLink) {
          // Calculate if the element needs scrolling into better view
          const navRect = mobileNav.getBoundingClientRect();
          const linkRect = newActiveLink.getBoundingClientRect();

          // Check if link is partially out of view or not in optimal position
          const isPartiallyOutOfView =
            linkRect.left < navRect.left || linkRect.right > navRect.right;
          const isNotInOptimalPosition = linkRect.left - navRect.left > 20; // Not near the start

          if (isPartiallyOutOfView || isNotInOptimalPosition) {
            // Smoothly scroll element into view with a small left margin
            const leftMargin = 12; // Pixel margin from left edge
            const scrollLeft = newActiveLink.offsetLeft - leftMargin;

            // Use smooth scrolling with easing
            const startPos = mobileNav.scrollLeft;
            const distance = scrollLeft - startPos;

            if (Math.abs(distance) > 10) {
              // Only animate if distance is significant
              const duration = 300; // ms
              const startTime = performance.now();

              const animateScroll = (timestamp) => {
                const elapsed = timestamp - startTime;
                if (elapsed < duration) {
                  // Ease out cubic
                  const progress = elapsed / duration;
                  const easeOutCubic = 1 - Math.pow(1 - progress, 3);

                  mobileNav.scrollLeft = startPos + distance * easeOutCubic;
                  requestAnimationFrame(animateScroll);
                } else {
                  mobileNav.scrollLeft = scrollLeft;
                }
              };

              requestAnimationFrame(animateScroll);
            }
          }
        }
      }
    };

    // Add click event listeners (original code)
    categoryLinks.forEach((link) => {
      link.addEventListener("click", (e) => {
        e.preventDefault();

        const targetId = link.getAttribute("href");
        const targetElement = document.querySelector(targetId);

        if (targetElement) {
          // Get offset for scrolling - account for header height and some extra space
          const extraOffset = 20; // Extra padding below the header for better visibility
          const scrollOffset = header ? header.offsetHeight + extraOffset : 80;

          // Get the current position of the target element
          const targetPosition =
            targetElement.getBoundingClientRect().top + window.pageYOffset;

          // Calculate position with offset
          const offsetPosition = targetPosition - scrollOffset;

          // Smooth scroll to adjusted position
          window.scrollTo({
            top: offsetPosition,
            behavior: "smooth",
          });

          // Update URL hash without scrolling
          history.pushState(null, null, targetId);

          // Update active category after scrolling
          setTimeout(updateActiveCategory, 500);
        }
      });
    });

    // Update active category on scroll (original code)
    window.addEventListener("scroll", updateActiveCategory);

    // Initial update (original code)
    updateActiveCategory();
  });
</script>
