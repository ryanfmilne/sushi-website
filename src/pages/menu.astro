---
import Layout from "../layouts/Layout.astro";
import PageHero from "../components/PageHero.astro";
import "../styles/menu.css";

// Import all menu items from content collection
let allMenuItems = [];
let categories = [];

try {
  // Import the getCollection function from Astro content
  const { getCollection } = await import("astro:content");

  // Fetch published menu items
  allMenuItems = await getCollection("menu", ({ data }) => {
    return data.published === true;
  });

  // Get unique categories and sort them
  categories = [...new Set(allMenuItems.map((item) => item.data.category))];

  // Sort categories in the correct order
  const categoryOrder = [
    "Entradas",
    "Charolas",
    "Arroces",
    "Naturales",
    "Empanizados",
    "Horneados",
    "Bebidas",
    "Extras",
  ];
  categories.sort((a, b) => {
    const indexA = categoryOrder.indexOf(a);
    const indexB = categoryOrder.indexOf(b);
    if (indexA === -1) return 1;
    if (indexB === -1) return -1;
    return indexA - indexB;
  });
} catch (error) {
  console.error("Error loading menu items:", error);

  // If there's an error, provide the correct categories
  categories = [
    "Entradas",
    "Charolas",
    "Arroces",
    "Naturales",
    "Empanizados",
    "Horneados",
    "Bebidas",
    "Extras",
  ];
  allMenuItems = [];
}

// Group menu items by category
const menuByCategory = categories.reduce((acc, category) => {
  acc[category] = allMenuItems.filter(
    (item) => item.data.category === category
  );
  return acc;
}, {});

// Fallback content if no menu items are found
const noItemsMessage =
  "No menu items found. The restaurant owner will add menu items soon using the content management system.";

// Function to create category ID
const getCategoryId = (category) => {
  return category.toLowerCase().replace(/\s+/g, "-");
};
---

<Layout title="Our Menu" transparentHeader={false}>
  <PageHero
    title="Our Menu"
    subtitle="Explore our carefully crafted dishes, prepared with fresh, locally-sourced ingredients."
    desktopBackgroundSrc="/images/hero-desktop.jpg"
    mobileBackgroundSrc="/images/hero-mobile.jpg"
    overlayColor="rgba(0, 0, 0, 0.6)"
  />

  <div class="bg-stone-100 py-8">
    <div class="container mx-auto px-4">
      <!-- Mobile Category Navigation (visible on mobile only) -->
      <div
        class="block md:hidden mb-8 bg-white rounded-lg shadow overflow-x-auto mobile-category-nav">
        <div class="flex whitespace-nowrap">
          {
            categories.map((category) => (
              <a
                href={`#${getCategoryId(category)}`}
                class="py-3 px-4 font-medium text-stone-700 hover:text-orange-600 border-b-2 border-transparent hover:border-orange-600 transition-colors">
                {category}
              </a>
            ))
          }
        </div>
      </div>

      <div class="flex flex-col md:flex-row gap-8">
        <!-- Sidebar Category Menu (hidden on mobile) -->
        <div class="hidden md:block w-64 flex-shrink-0">
          <div class="bg-white rounded-lg shadow sticky top-24 sticky-sidebar">
            <div class="p-4 border-b border-stone-200">
              <h3 class="font-heading font-bold text-lg">Categories</h3>
            </div>
            <nav class="p-2">
              <ul>
                {
                  categories.map((category) => (
                    <li>
                      <a
                        href={`#${getCategoryId(category)}`}
                        class="category-link block py-2 px-3 rounded hover:bg-orange-50 text-stone-700 hover:text-orange-600 transition-colors">
                        {category}
                      </a>
                    </li>
                  ))
                }
              </ul>
            </nav>
          </div>
        </div>

        <!-- Menu Content Area -->
        <div class="w-full">
          {
            allMenuItems.length === 0 ? (
              <div class="bg-white p-8 rounded-lg shadow-md text-center">
                <p class="text-lg text-stone-600">{noItemsMessage}</p>
              </div>
            ) : (
              <div class="space-y-12">
                {categories.map((category) =>
                  menuByCategory[category]?.length > 0 ? (
                    <div id={getCategoryId(category)} class="scroll-mt-24">
                      <div class="bg-white rounded-lg shadow-md p-6">
                        <h2 class="text-2xl font-heading font-semibold mb-6 pb-2 border-b border-stone-200 category-heading">
                          {category}
                        </h2>
                        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                          {menuByCategory[category].map((item) => (
                            <div class="menu-item flex flex-col md:flex-row gap-4 p-4 border border-stone-100 rounded-lg hover:shadow-md transition-shadow">
                              {item.data.image && (
                                <div class="w-full md:w-32 h-32 flex-shrink-0">
                                  <img
                                    src={item.data.image}
                                    alt={item.data.title}
                                    class="w-full h-full object-cover rounded-md"
                                    loading="lazy"
                                  />
                                </div>
                              )}
                              <div class="flex-grow">
                                <div class="flex justify-between items-start mb-2">
                                  <h3 class="text-lg font-heading font-semibold">
                                    {item.data.title}
                                  </h3>
                                  <span class="text-orange-600 font-medium ml-4">
                                    ${item.data.price.toFixed(2)}
                                  </span>
                                </div>
                                <p class="text-stone-600 text-sm mb-3">
                                  {item.data.description}
                                </p>
                                <div class="flex flex-wrap items-center gap-2 mt-auto">
                                  {item.data.vegetarian && (
                                    <span class="bg-green-100 text-green-800 text-xs font-medium px-2 py-0.5 rounded">
                                      Vegetarian
                                    </span>
                                  )}
                                  {item.data.vegan && (
                                    <span class="bg-green-100 text-green-800 text-xs font-medium px-2 py-0.5 rounded">
                                      Vegan
                                    </span>
                                  )}
                                  {item.data.glutenFree && (
                                    <span class="bg-blue-100 text-blue-800 text-xs font-medium px-2 py-0.5 rounded">
                                      Gluten-Free
                                    </span>
                                  )}
                                  {item.data.spicyLevel > 0 && (
                                    <div class="flex items-center">
                                      <span class="text-xs text-stone-600 mr-1">
                                        Spicy: {item.data.spicyLevel}
                                      </span>
                                    </div>
                                  )}
                                </div>
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>
                    </div>
                  ) : null
                )}
              </div>
            )
          }
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  // Smooth scrolling for category links
  document.addEventListener("DOMContentLoaded", () => {
    const categoryLinks = document.querySelectorAll(
      ".category-link, .mobile-category-nav a"
    );

    // Function to update active category link
    const updateActiveCategory = () => {
      // Get all category sections
      const sections = document.querySelectorAll(
        '[id^="entradas-"], [id^="charolas-"], [id^="arroces-"], [id^="naturales-"], [id^="empanizados-"], [id^="horneados-"], [id^="bebidas-"], [id^="extras-"]'
      );

      // Find which section is currently most visible
      let currentSection = "";
      let maxVisibility = 0;

      sections.forEach((section) => {
        const rect = section.getBoundingClientRect();
        const sectionHeight = rect.height;
        const visibleHeight =
          Math.min(rect.bottom, window.innerHeight) - Math.max(rect.top, 0);
        const percentVisible = visibleHeight / sectionHeight;

        if (percentVisible > maxVisibility && percentVisible > 0) {
          maxVisibility = percentVisible;
          currentSection = section.id;
        }
      });

      // Update active class
      categoryLinks.forEach((link) => {
        const href = link.getAttribute("href").substring(1);
        if (href === currentSection) {
          link.classList.add("active");
        } else {
          link.classList.remove("active");
        }
      });
    };

    // Add click event listeners
    categoryLinks.forEach((link) => {
      link.addEventListener("click", (e) => {
        e.preventDefault();

        const targetId = link.getAttribute("href");
        const targetElement = document.querySelector(targetId);

        if (targetElement) {
          // Smooth scroll to the element
          targetElement.scrollIntoView({
            behavior: "smooth",
            block: "start",
          });

          // Update URL hash without scrolling
          history.pushState(null, null, targetId);

          // Update active category after scrolling
          setTimeout(updateActiveCategory, 500);
        }
      });
    });

    // Update active category on scroll
    window.addEventListener("scroll", updateActiveCategory);

    // Initial update
    updateActiveCategory();
  });
</script>
