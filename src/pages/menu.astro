---
import Layout from '../layouts/Layout.astro';
import PageHero from '../components/PageHero.astro';

// Import all menu items from content collection
let allMenuItems = [];
let categories = [];

try {
  // Import the getCollection function from Astro content
  const { getCollection } = await import('astro:content');
  
  // Fetch published menu items
  allMenuItems = await getCollection('menu', ({ data }) => {
    return data.published === true;
  });
  
  // Get unique categories and sort them
  categories = [...new Set(allMenuItems.map(item => item.data.category))];
  
  // Sort categories in a logical order
  const categoryOrder = ['Appetizers', 'Main Course', 'Desserts', 'Drinks'];
  categories.sort((a, b) => {
    const indexA = categoryOrder.indexOf(a);
    const indexB = categoryOrder.indexOf(b);
    if (indexA === -1) return 1;
    if (indexB === -1) return -1;
    return indexA - indexB;
  });
} catch (error) {
  console.error('Error loading menu items:', error);
  // If there's an error, provide empty arrays
  allMenuItems = [];
  categories = [];
}

// Group menu items by category
const menuByCategory = categories.reduce((acc, category) => {
  acc[category] = allMenuItems.filter(item => item.data.category === category);
  return acc;
}, {});

// Fallback content if no menu items are found
const noItemsMessage = "No menu items found. The restaurant owner will add menu items soon using the content management system.";
---

<Layout title="Our Menu">
  <PageHero 
    title="Our Menu" 
    subtitle="Explore our carefully crafted dishes, prepared with fresh, locally-sourced ingredients."
  />

  <div class="bg-stone-100 py-8">
    <div class="container mx-auto px-4">
      {allMenuItems.length === 0 ? (
        <div class="bg-white p-8 rounded-lg shadow-md text-center">
          <p class="text-lg text-stone-600">{noItemsMessage}</p>
        </div>
      ) : (
        <!-- Menu categories -->
        <div class="space-y-12" id="menu-content">
          {categories.map(category => (
            menuByCategory[category].length > 0 && (
              <div class="menu-category" id={`category-${category.toLowerCase().replace(' ', '-')}`}>
                <h2 class="text-2xl font-semibold mb-6 text-center">{category}</h2>
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {menuByCategory[category].map(item => (
                    <div class="menu-item">
                      <div class="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow">
                        {item.data.image && (
                          <div class="relative h-48 bg-gray-200">
                            <img 
                              src={item.data.image} 
                              alt={item.data.title} 
                              class="w-full h-full object-cover"
                              loading="lazy"
                            />
                          </div>
                        )}
                        <div class="p-4">
                          <div class="flex justify-between items-start mb-2">
                            <h3 class="text-lg font-semibold">{item.data.title}</h3>
                            <span class="text-amber-600 font-medium">${item.data.price.toFixed(2)}</span>
                          </div>
                          <p class="text-stone-600 text-sm mb-3">{item.data.description}</p>
                          <div class="flex flex-wrap items-center gap-2 mt-auto">
                            {item.data.vegetarian && (
                              <span class="bg-green-100 text-green-800 text-xs font-medium px-2 py-0.5 rounded">Vegetarian</span>
                            )}
                            {item.data.vegan && (
                              <span class="bg-green-100 text-green-800 text-xs font-medium px-2 py-0.5 rounded">Vegan</span>
                            )}
                            {item.data.glutenFree && (
                              <span class="bg-blue-100 text-blue-800 text-xs font-medium px-2 py-0.5 rounded">Gluten-Free</span>
                            )}
                            {item.data.spicyLevel > 0 && (
                              <div class="flex items-center">
                                <span class="text-xs text-stone-600 mr-1">Spicy: {item.data.spicyLevel}</span>
                              </div>
                            )}
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )
          ))}
        </div>
      )}
    </div>
  </div>
</Layout>